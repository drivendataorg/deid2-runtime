# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# specific branch build
trigger:
  branches:
    include:
    - master

pr:
  autoCancel: true
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

variables:
  containerRegistry: competitioncodeexecutionprod
  imageName: deid2
    
jobs:
- job: publish_runtime_container
  condition: eq(variables['build.sourceBranch'], 'refs/heads/master')
  pool:
    vmImage: 'ubuntu-latest'
  timeoutInMinutes: 360
  cancelTimeoutInMinutes: 90
  steps:
  - script: |
      echo $(Build.SourceVersion)
      cd runtime
      docker build -t $(containerRegistry).azurecr.io/$(imageName):$(Build.SourceVersion) .
      docker login -u $(containerRegistry) -p $(dockerPassword) $(containerRegistry).azurecr.io
      docker push $(containerRegistry).azurecr.io/$(imageName):$(Build.SourceVersion)
    displayName: 'Build and deploy Docker container'
- job: test_installs
  condition: ne(variables['build.sourceBranch'], 'refs/heads/master')
  pool:
    vmImage: 'ubuntu-latest'
  timeoutInMinutes: 360
  cancelTimeoutInMinutes: 90
  steps:
  - script: |
      cd runtime
      docker build -t $(containerRegistry)/$(imageName):$(Build.SourceVersion) .
      docker run --mount type=bind,source=$(pwd)/run-tests.sh,target=/run-tests.sh,readonly \
                  --mount type=bind,source=$(pwd)/tests,target=/tests,readonly \
                  $(containerRegistry)/$(imageName):$(Build.SourceVersion) \
                  /bin/bash -c "bash /run-tests.sh"
    displayName: 'Test installs'
